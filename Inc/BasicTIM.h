/*
 * BasicTIM.h
 *
 *  Created on: 3 May 2020
 *      Author: Bodn√°r Benjamin
 */

#ifndef BASICTIM_BASICTIM_H_
#define BASICTIM_BASICTIM_H_

#include "types.h"
#if defined(MCU_F446) || defined(MCU_G070) || defined(MCU_F410) || defined(MCU_L433) || defined(MCU_G071) || defined(MCU_F415) || defined(MCU_L476)
typedef enum
{
#if defined(MCU_F410) || defined(MCU_G070) || defined(MCU_L433) || defined(MCU_G071) || defined(MCU_F446) || defined(MCU_F415) || defined(MCU_L476)
	TIM6 = 0,
#endif
#if defined(MCU_G070) || defined(MCU_L433) || defined(MCU_G071) || defined(MCU_F446) || defined(MCU_F415) || defined(MCU_L476)
	TIM7 = 1,
#endif
} dtBTimId;

typedef struct
{
	/* The counter value is compares to this value */
	uint16 	AutoReload;

	/* value of prescaler; the effective prescaler value = this value + 1 */
	uint16 	Prescaler;

    /* 1:  update event is generation is disabled  */
	uint8	UpdateDisable	:1;

	/* 0: update event is generated by:
	 *    - counter over/uderflow
	 *    - setting the UG bit
	 *    - through slave mode controller
	 * 1: only over/unerflow generates UEV
	 */
	uint8	UpdateSource	:1;
	uint8	OnePulse		:1;

	/* 1: ARR register is buffered */
	uint8	ARPreload		:1;
	uint8	Enable			:1;
	uint8	MasterMode		:2;
	uint8   DmaTrig         :1;
} dtBasicTimConfig;

extern void BasicTIM_Set(dtBTimId Id, dtBasicTimConfig Config, void (*IrqPtr)(void));
extern void BasicTIM_SetPS(dtBTimId Id, uint16 Value);
extern void BasicTIM_SetAR(dtBTimId Id, uint16 Value);
extern void BasicTIM_Update(dtBTimId Id);
extern void BasicTIM_Stop(dtBTimId id);
extern void BasicTIM_Start(dtBTimId id);

#endif /* BASICTIM_BASICTIM_H_ */
#else
#warning "NO CPU IS DEFINED"
#endif
